package com.ladun.game.objects;

import com.ladun.engine.GameContainer;
import com.ladun.engine.Renderer;
import com.ladun.engine.gfx.ImageTile;
import com.ladun.game.GameManager;
import com.ladun.game.Scene.GameScene;
import com.ladun.game.net.Client;
import com.ladun.game.objects.projectile.Bullet;

public class Weapon extends GameObject{
	public enum Type{
		SWORD,BOW
	}
	
	private Type type;
	private GameObject parent;
	
	private float anim;
	private int animSpeed= 28;
	private int animType;
	private boolean attacking = false;
	
	private String imageName;
	private float xPivot;
	private float yPivot;
	private float distanceToParent = 24;

	private boolean mirror;

	private HitRange hitRange;
	
	public Weapon(GameObject parent,GameScene gs) {
		this.parent = parent;
		width = 64;
		height = 64;
		setType(Type.BOW);
		
		hitRange = new HitRange(this,HitRange.Type.CIRCLE);
		gs.addObject(hitRange);
	}
	
	@Override
	public void update(GameContainer gc, GameManager gm, float dt) {
		// TODO Auto-generated method stub
		setType(Type.SWORD);

		angle = parent.angle;		
		posX = parent.posX + parent.width / 2 - width * xPivot + (float)(distanceToParent * Math.cos(Math.toRadians(angle)));
		posZ = parent.posZ + parent.posY + parent.height / 2 - height * yPivot + (float)(distanceToParent* Math.sin(Math.toRadians(angle)));
		
		if(Math.abs(angle) > 90) {
			mirror =  true;
			angle += 180;
		}
		else {
			mirror= false;
		}
		
		if(attacking) {
			anim+= dt * animSpeed;
			if(anim > 6)
				attacking= false;
			else if(anim + dt * animSpeed > 3) {
				hitRange.active(posX,posZ);
			}
			else if(anim > 3) {
				hitRange.setActive(false);
			}
		}
	}

	@Override
	public void render(GameContainer gc, Renderer r) {
		// TODO Auto-generated method stub
		if(attacking)
			r.drawImageTile((ImageTile)gc.getImageLoader().getImage("weapon_attack"),
					(int)posX - parent.width / 2,(int)(posZ ),
					(int)anim,0,
					xPivot, 0.45f,
					mirror,false,angle);
		else
			r.drawImage(gc.getImageLoader().getImage(imageName),(int)posX,(int)(posZ),xPivot,yPivot,mirror,false,angle);
		
		r.drawRect((int)posX, (int)posZ, 2,2, 0, 0xffff0000);
	}

	@Override
	public void collision(GameObject other) {
		// TODO Auto-generated method stub
		
	}
	
	public void Attack(GameManager gm, GameScene gs) {
		switch(type) {
		case SWORD:
			attacking = true;
			anim = 0;
			break;
		case BOW:
			Shoot(gm,gs);
			break;
		}
		
	}
	
	public void Shoot(GameManager gm,GameScene gs) {
		Bullet bullet = (Bullet)gs.getInactiveObject("bullet");
		if(bullet == null) {
			gs.addObject(new Bullet(posX,posY,posZ,angle,0,1));
		}
		else {
			bullet.setting(posX, posY, posZ, angle, 0, 1);
		}
		
		if(gm != null) {
			if(parent instanceof Player)
				if(((Player)parent).isLocalPlayer()) {
					gm.getClient().send(Client.PACKET_TYPE_OBJECTSPAWN,new Object[] {"bullet"});
				}
		}
	}
	//---------------------------------------------------------
	public Type getType() {
		return type;
	}

	public void setType(Type type) {
		this.type = type;
		switch(type) {
		case SWORD:
			imageName = "sword";
			xPivot = .5f;
			yPivot = .84f;
			break;
		case BOW:
			imageName = "bow";
			xPivot = .5f;
			yPivot = .5f;
			break;
		}
		
	}

}
