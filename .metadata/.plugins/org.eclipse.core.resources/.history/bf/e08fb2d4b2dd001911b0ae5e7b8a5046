package com.ladun.game;

import java.util.ArrayList;
import java.util.Random;

import com.ladun.engine.GameContainer;
import com.ladun.engine.Renderer;
import com.ladun.engine.gfx.Image;
import com.ladun.game.objects.GameObject;

public class Map {
	
	private static final int SPAWN_COLOR = 0xff68f38a;

	private ArrayList<GameObject> objects = new ArrayList<GameObject>();
	
	private String name;
	private Image floorImage;
	private Image ceilImage;
	private Image collisionImage;
	
	private int backgroundColor = 0;
	private boolean load;
	private float[] heights;
	private boolean[] collisions;
	private int levelW,levelH;
		
	public Map(String name) {
		this.name = name;
		floorImage = new Image("/Map/" + name + "_floor.png");
		ceilImage = new Image("/Map/" + name + "_ceil.png");
		collisionImage =  new Image("/Map/" + name + "_collision.png");
		loadLevel();
	}
	public Map(String name,GameObject[] objects) {
		this(name);
		
		for(int i = 0; i  < objects.length;i++) {
			this.objects.add(objects[i]);
		}
		
	}
	
	public void update(GameContainer gc, GameManager gm) {
		for(int i =0;i < objects.size();i++) {
			objects.get(i).update(gc, gm);
		}
	}
	public void render(GameContainer gc, Renderer r) {

		r.setBackgroundColor(backgroundColor);
		r.setzDepth(0);
		r.drawMap(floorImage);
		r.setzDepth(Renderer.LAYER_UI - 10);
		r.drawMap(ceilImage);
		//RenderCollision(r);
		

		for(GameObject obj : objects) {
			obj.render(gc, r);
		}
	}
	
	private void RenderCollision(Renderer r) {
		int ts = GameManager.TS;
		
		for(int y = 0; y < levelH; y++) {
			for(int x = 0; x < levelW;x++) {
				//if(!collisions[x + y * levelW])
				
				r.setzDepth((int)(y  * ts +Math.abs(heights[x + y * levelW])) );
				
				int color = heights[x + y * levelW] ==0?0xffdebeed : 0xffdafadd;
				r.drawFillRect(x * ts, y*ts + (int)heights[x + y * levelW], ts, ts,0, color); // 0xffbd91ed
				//r.drawText(heights[x + y * levelW] + "", x * ts, y*ts + (int)heights[x + y * levelW], 0xff000000);
				r.drawText(x+ ", " + y, x * ts, y*ts+16 + (int)heights[x + y * levelW], 0xff000000);
			}
		}
		for(int y = 0; y < levelH; y++) {
			for(int x = 0; x < levelW;x++) {
				//if(collisions[x + y * levelW])
				if(heights[x + y * levelW] != 0)
					r.drawRect(x * ts, y*ts, ts, ts,0, 0xffa6ec90);
			}
		}
	}
	
	private void loadLevel() {
		load  		= true;
		levelW 		= collisionImage.getW();
		levelH 		= collisionImage.getH();
		collisions 	= new boolean[levelW * levelH];
		heights 	= new float[levelW * levelH];
		
		boolean[] flag		= new boolean[levelW * levelH];

		for (int y = 0; y < levelH; y++) {
			for (int x = 0; x < levelW; x++) {
				if(!flag[x + y * levelW]){
					flag[x + y * levelW] = true;
					if (collisionImage.getP()[x + y * levelW] == 0xff000000) {
						heights[x + y * levelW] = -GameManager.TS;
						collisions[x + y * levelW] = true;
					} else {
						heights[x + y * levelW] = 0;						
						collisions[x + y * levelW] = false;
					}
				}
			}
		}
	}	
	
	public int[] randomSpawnPoint() {
		
		Random random = new Random();
		
		int randomIndex = random.nextInt(levelW * levelH);
		
		while(collisions[randomIndex] || collisionImage.getP()[randomIndex] != 0xff7fb5d5) {
			randomIndex = random.nextInt(levelW * levelH);
		}
		//System.out.println("RandomIndex:"+randomIndex +", " + (randomIndex % levelW) + ", "+ (randomIndex / levelW) + ": " + levelW + ":" + levelH);
		return new int[] {randomIndex % levelW, randomIndex / levelW};
	}

	//------------------------------------------------------------------------------------------------------------------------
	
	public boolean currentMap(int x, int y) {
		if (x < 0 || x >= levelW || y < 0 || y >= levelH)
			return true;
		return collisions[y * levelW + x];
	}
	public float getHeight(int tileX,int tileY) {
		if (tileX < 0 || tileX >= levelW || tileY < 0 || tileY >= levelH)
			return Physics.MAX_HEIGHT;
		return heights[tileY * levelW + tileX];
	}

	public int getLevelW() {
		return levelW;
	}
	public int getLevelH() {
		return levelH;
	}
	
	public int getBackgroundColor() {
		return backgroundColor;
	}
	public void setBackgroundColor(int backgroundColor) {
		this.backgroundColor = backgroundColor;
	}

}
