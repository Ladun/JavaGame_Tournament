package com.ladun.game.objects.effect;

import java.util.Random;

import com.ladun.engine.GameContainer;
import com.ladun.engine.Renderer;
import com.ladun.engine.Time;
import com.ladun.game.GameManager;
import com.ladun.game.Scene.GameScene;
import com.ladun.game.objects.GameObject;
import com.ladun.game.objects.HitRange;
import com.ladun.game.util.Util;

public class SkillEffect extends GameObject{
	public enum Type {Meteor}
	public enum State {Reach, Disappear}

	private Effect effect1;
	private Effect effect2;
	private Type type;
	private State state;
	
	private float velX;
	private float velY;
	
	private float timeToReach;
	private float timeToDisappear;
	private float time;

	
	private HitRange hitRange;

	/**
	 * 
	 * @param centerX
	 * 	[Type Meteor : targetX]
	 * @param posY
	 * 	[Type Meteor : targetY]
	 * @param centerZ
	 * 	[Type Meteor : targetZ]
	 */
	public SkillEffect(String parentTag,Type type,
			float centerX, float posY, float centerZ) {
		this.tag = "skilleffect";
		effect1 = new Effect();
		effect2 = new Effect();
		hitRange = new HitRange(this, HitRange.Type.RECT,parentTag);
		setting(type,centerX,posY,centerZ);
	}


	@Override
	public void update(GameContainer gc, GameManager gm) {

		time += Time.DELTA_TIME;
		switch(state){
		case Reach:
			if(time <= timeToReach) {
			
				posX += velX * Time.DELTA_TIME;
				posY += velY * Time.DELTA_TIME;
			}
			else {
				state = State.Disappear;
				((GameScene)gm.getScene("InGame")).getCamera().cameraShake();
				time = 0;
				hitRange.active(getCenterX() - effect2.getWidth() / 2 , getCenterZ()  - effect2.getHeight() / 2, effect2.getWidth(), effect2.getHeight());
				effect2.setPosX(posX);
				effect2.setPosZ(posZ);
				
				//System.out.println(posX );
			}
			
			if(effect1.getImageName().length() != 0) {
				effect1.update(gc, gm);
				effect1.setPosX(posX);
				effect1.setPosY(posY);
				effect1.setPosZ(posZ);
			}
			break;
		case Disappear:
			if(hitRange.isActive() && time >= 1f) {
				hitRange.setActive(false);
			}
			if(effect2.getImageName().length() != 0) {
				effect2.update(gc, gm);
			}

			if(!effect2.isActive()) {
				active = false;
			}
			
			break;
		}
		
		if(hitRange.isActive())
			hitRange.update(gc, gm);
	}

	@Override
	public void render(GameContainer gc, Renderer r) {
		
		r.setzDepth((int)(posZ + Math.abs(posY) + height));
		
		switch(type) {		
		case Meteor:
			float percent =  (Math.abs(posY)/ (10 * GameManager.TS));
			r.drawFillElipse((int)(posX + width / 2), (int)(posZ + height / 2), (int)(80 * (1 + percent * 2)), (int)(50 * (1 + percent * 2)),( Util.lerp(125, 30,percent) << 24));
			if(state == State.Reach)
				if(effect1.getImageName().length() != 0) 
					effect1.render(gc, r);
			else
				if(effect2.getImageName().length() != 0) 
					effect2.render(gc, r);
			break;
		
		}
		if(hitRange.isActive())
			hitRange.render(gc, r);
		
	}


	@Override
	public void collision(GameObject other) {
		
	}
	
	public void setting(Type type,
			float centerX, float posY, float centerZ) {
		state = State.Reach;
		active = true;
		time = 0;
		setType(type,centerX, posY, centerZ);
	}
	
	private void setType(Type type,float centerX, float posY ,float centerZ) {
		this.type = type;
		
		switch(type){
		case Meteor:
			width = 128;
			height = 192;
			this.posX = centerX - width / 2;
			this.posY = posY;
			this.posZ = centerZ - height / 2;
			effect2.setting("meteor_after", 
					6, .7f, 0,
					centerX - 250 / 2, 0, centerZ - 180 / 2, 
					250,180, 
					0,
					false,false);
			
			int distance=  10 * GameManager.TS;
			this.posY -= distance;
			
			timeToReach = 2f;
			velX = 0;
			velY = distance / timeToReach;	
			
			
			hitRange.setActive(false);
			effect1.setting("meteor", 
					3, .2f, 0, 
					posX, posY, posZ, 
					128,192, 
					0, false,false);
			break;
		}
		
	}

}
