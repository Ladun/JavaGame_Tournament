package com.ladun.game.components;

import com.ladun.engine.GameContainer;
import com.ladun.engine.Renderer;
import com.ladun.game.GameManager;
import com.ladun.game.objects.GameObject;
import com.ladun.game.util.BinaryWritter;

public class NetworkTransform extends Component{

	private final static byte PACKET_VALUETYPE_PLAYERTINFO = 0x11;//packet|value type|player transform information
	
	private final static float PACKET_SEND_TIME = 1/6f; 
	
	private float srcX, srcY, srcZ;
	private float srcAngle;
	private float dstX, dstY ,dstZ;
	private float dstAngle;
	
	private float time;
	
	private StringBuilder sb = new StringBuilder();
	private BinaryWritter bw = new BinaryWritter();
	
	public NetworkTransform(GameObject parent)
	{
		this.parent = parent;
		this.tag = "netTransform";	
		
		
		srcX = parent.getPosX();
		srcY = parent.getPosY();
		srcZ = parent.getPosZ();
		srcAngle = parent.getAngle();
		
		dstX = srcX;
		dstY = srcY;
		dstZ = srcZ;
		dstAngle = srcAngle;

	}
	
	@Override
	public void update(GameContainer gc, GameManager gm, float dt) {
		// TODO Auto-generated method stub
		time += dt;
		
		if(time > PACKET_SEND_TIME)
		{
			time -= PACKET_SEND_TIME;
			packetSend(gm);
		}
		
		parent.setPosX(lerp(srcX,dstX,time / PACKET_SEND_TIME));
		parent.setPosY(lerp(srcY,dstY,time / PACKET_SEND_TIME));
		parent.setPosZ(lerp(srcZ,dstZ,time / PACKET_SEND_TIME));
		parent.setAngle(lerp(srcAngle,dstAngle,time / PACKET_SEND_TIME));		
		
	}

	@Override
	public void render(GameContainer gc, Renderer r) {
		// TODO Auto-generated method stub
		
	}
	
	public void packetSend(GameManager gm) {
		srcX = parent.getPosX();
		srcY = parent.getPosY();
		srcZ = parent.getPosZ();
		srcAngle = parent.getAngle();
		
		bw.clear();
		sb.setLength(0);
		bw.write(PACKET_VALUETYPE_PLAYERTINFO);
		sb.append(",");
		sb.append(srcX);
		sb.append(",");
		sb.append(srcY);
		sb.append(",");
		sb.append(srcZ);
		sb.append(",");
		sb.append(srcAngle);
		bw.write((sb.toString()).getBytes());
		
		gm.getClient().sendValue(bw.getBytes());
	}

	private float lerp(float src, float dst, float percent) {
		return dst + (dst - src) * percent;
	}
	
	public void setInfo(float x, float y, float z, float angle) {
		
	}
}
