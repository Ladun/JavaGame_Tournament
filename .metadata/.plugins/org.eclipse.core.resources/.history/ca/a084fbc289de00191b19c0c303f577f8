package com.ladun.game.util;

import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

import com.ladun.game.Point;

public class PathFind {
	
	public class Node{
		public Point p;
		public int g, h;
		public Node(Point p,int g, int h) {
			this.p = p;
			this.g = g;
			this.h = h;
		}
	}

	public static Queue<Point> AStar(int[][] map, Point st, Point ed){
		PriorityQueue<Node> openList = new PriorityQueue<Node>();
		PriorityQueue<Node> closeList = new PriorityQueue<Node>();
		Queue<Point> path = new LinkedList<Point>();
		if(!isInMap(map,st) || !isInMap(map,ed))
			return null;
		
		openList.add(new Node(st,0,0));
		while()
		
		
		return path;
	}
	
	private static boolean isInMap(int[][] map, Point p) {
		if(p.getY() >= 0 && p.getY() < map.length && p.getY() >= 0 && p.getY() < map[i].length)
			return true;
		return false;
	}
}
