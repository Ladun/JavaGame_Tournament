package com.ladun.game.net.copy;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;

public class Client {
	
	private final static byte[] PACKET_HEADER = new byte[] { 0x40,0x40};
	private final static byte PACKET_TYPE_CONNECT = 0x01;
	private final static byte PACKET_TYPE_DISCONNECT = 0x02;
	
	public enum Error{
		NONE, INVALID_HOST,SOCKET_EXCEPTION
	}
	
	private String ipAddress;
	private int port;
	private Error errorCode = Error.NONE;
	
	private InetAddress serverAddress;
	
	private DatagramSocket socket;
	
	/**
	 * 
	 * @param host
	 * 			  Eg. 192.168.1.1:5000
	 */
	public Client(String host) {
		String[] parts = host.split(":");
		if(parts.length != 2) {
			errorCode = Error.INVALID_HOST;
			return;
		}
		
		this.ipAddress = parts[0];
		try {
			this.port = Integer.parseInt(parts[1]);
		}catch(NumberFormatException e) {
			errorCode = Error.INVALID_HOST;
			return;
		}
	}
	
	/**
	 * 
	 * @param host
	 * 			  Eg. 192.168.1.1
	 * @param port
	 * 			  Eg. 5000
	 */
	public Client(String host, int port) {
		this.ipAddress= host;
		this.port = port;
	}
	
	public boolean connect() {
		try {
			serverAddress = InetAddress.getByName(ipAddress);
		} catch (UnknownHostException e) {
			e.printStackTrace();
			errorCode = Error.INVALID_HOST;
			return false;
		}
		
		try {
			socket = new DatagramSocket();
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			errorCode = Error.SOCKET_EXCEPTION;
			return false;
		}
		send(new byte[] {0x40,0x40,0x01});
		return true;
	}
	
	public void send(byte[] data) {
		assert(socket.isConnected());
		DatagramPacket packet = new DatagramPacket(data, data.length, serverAddress, port);
		
		try {
			socket.send(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public Error getErrorCode() {
		return errorCode;
	}
}
